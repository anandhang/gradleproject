

sourceSets{
    test{
        java.srcDirs = ['src/test/java']
    }
}


/*

sourceSets{
    test{
        java.srcDirs = ['src/test/java']
        resources {
            srcDirs = ['src/drivers/chromedriver']
            output.resourcesDir = file("$buildDir")
        }
    }
}

def getChromeVersion(){
    def version = new ByteArrayOutputStream()
    exec {
        workingDir = "$projectDir"
        commandLine 'cmd', ' /c "call ls "C:\\Program Files\\Google\\Chrome\\Application" | grep -E "^[0-9]+." | tail -1 | cut -c1-2"'
        standardOutput = version
    }
    println "Chrome Version:" + version.toString().trim()
    return version.toString().trim()
}

def updateChromeDriverPropertyFile(version){
    File File = file("drivers\\chromedriver\\chromedriverversion.txt")
    file().write("""Auto generated file. Do not modify. Do not upload to git.
                    $version""")
}

def getChromeDriverVersion(){
    File file = file("drivers\\chromedriver\\chromedriverversion.txt")
    if(file.canRead()){
        version = file.readLines()[1].toString().trim()
        println "Chrome Driver Version:" + version
        return version.toString().trim()
    }
    return ""
}

def downloadNewVersionOfChromeDriver(chromeVersion){
    killWinChromeDriver()
    exec {
        workingDir = "$projectDir"
        commandLine 'cmd', ' /c "call npm install chromedriver@' + chromeVersion + ' --prefix ' + projectDir + '\\drivers\\chromedriver"'
    }
}

def killWinChromeDriver() {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        def count = new ByteArrayOutputStream()
        exec {
            workingDir = "$projectDir"
            commandLine 'cmd', ' /c "call tasklist | find /I /C "chromedriver.exe"'
            standardOutput = count
        }

        if (count.toString().trim() != "0"){
            exec {
                workingDir = "$projectDir"
                commandLine 'cmd', ' /c "call taskkill /IM chromedriver.exe /F & echo 1"'
                println "ChromeDriver Killed"
            }
        }
    }
}

task killChromeDriver {
    dependsOn test
    println "Kill Chrome Driver after run"
    killWinChromeDriver()
}

task installChromeDriver {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')){
        def chromeVersion = getChromeVersion()
        def chromeDriverVersion = getChromeDriverVersion()
        if(!(chromeVersion == chromeDriverVersion)){
            println "install ChromeDriver"
            downloadNewVersionOfChromeDriver(chromeVersion)
            updateChromeDriverPropertyFile(chromeVersion)
        }
    }
}

test {
    dependsOn installChromeDriver
    testLogging.showStandardStreams = true
    useTestNG(){
        suites "src/test/java/test_scripts/testngSuite.xml"
    }
}
 */